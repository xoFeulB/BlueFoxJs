(()=>{"use strict";const t=(e,n,r=".")=>{let l=e.split(r)[0],c=e.split(r).slice(1).join(r);if(null!=n[l]){let o=t(c,n[l],r);return!0===o?{object:n,property:l,path:e,separator:r,value:n[l]}:o}return e==c},n=e=>{const t=Object.getOwnPropertyNames(e);for(const r of t){const t=e[r];t&&"object"==typeof t&&n(t)}return Object.freeze(e)},r=async(e={_scope_:null})=>{let t=[];return Object.keys(e).filter((e=>!["_scope_"].includes(e))).forEach((n=>{[...e._scope_.querySelectorAll(n)].filter((e=>e)).forEach((e=>{t.push({element:e,selector:new String(n)})}))})),await Promise.all(t.map((t=>new Promise((async(n,r)=>{try{await e[t.selector]({element:t.element,selector:t.selector,self:e}),n(t.selector)}catch(e){console.info("walkHorizontally |",e)}}))))),e},l=async(e={_scope_:null})=>{for(let t of Object.keys(e).filter((e=>!["_scope_"].includes(e)))){let n=[...e._scope_.querySelectorAll(t)].filter((e=>e));for(let r of n)try{await e[t]({element:r,selector:new String(t),self:e})}catch(e){console.info("walkVertically |",e)}}return e},c=n({Util:{getProperty:t},Walker:{walkHorizontally:r,walkVertically:l},Sync:{view:async(n=document)=>{await r({_scope_:n,"[capture]":async e=>{let t=document.querySelector(e.element.attributes.capture.value).tagName.toLowerCase();e.element.setAttribute("sync",""),e.element.setAttribute("sync-to-this",""),"input"==t?(e.element.setAttribute("sync-to-property","textContent"),e.element.setAttribute("sync-from",e.element.attributes.capture.value),e.element.setAttribute("sync-from-property","value"),e.element.setAttribute("sync-event",JSON.stringify(["sync","change","input"]))):"select"==t&&(e.element.setAttribute("sync-to-property","textContent"),e.element.setAttribute("sync-from",e.element.attributes.capture.value),e.element.setAttribute("sync-from-property","selectedOptions.0.textContent"),e.element.setAttribute("sync-event",JSON.stringify(["sync","change"]))),e.element.removeAttribute("capture")}}),await l({_scope_:n,"sync,[sync]":async n=>{let r=()=>{l()},l=()=>{n.element.SyncView={from:n.element.attributes["sync-from-this"]?e:document.querySelector(n.element.attributes["sync-from"].value),fromProperty:n.element.attributes["sync-from-property"].value,to:n.element.attributes["sync-to-this"]?n.element:document.querySelector(n.element.attributes["sync-to"].value),toProperty:n.element.attributes["sync-to-property"].value,event:JSON.parse(n.element.attributes["sync-event"]?n.element.attributes["sync-event"].value:'["sync"]'),entryNop:n.element.attributes["sync-entry-nop"],init:r},n.element.SyncView.sync=()=>{let e=t(n.element.SyncView.fromProperty,n.element.SyncView.from),r=t(n.element.SyncView.toProperty,n.element.SyncView.to);try{r.object[r.property]=e.object[e.property]}catch{}},!n.element.SyncView.entryNop&&n.element.SyncView.sync(),n.element.SyncView.event.forEach((e=>{n.element.SyncView.from.addEventListener(e,(e=>{n.element.SyncView.sync(),n.element.SyncView.to.dispatchEvent(new Event("sync"))}))}))};r()}})}}});window.dispatchEvent(new CustomEvent("BlueFoxQuery@Ready",{detail:{BlueFoxQuery:c}}))})();