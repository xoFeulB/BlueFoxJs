(()=>{"use strict";const e=t=>{const l=Object.getOwnPropertyNames(t);for(const o of l){const l=t[o];l&&"object"==typeof l&&e(l)}return Object.freeze(t)},t=(e,l,o=".")=>{let r=e.split(o)[0],c=e.split(o).slice(1).join(o);if(null!=l[r]){let s=t(c,l[r],o);return!0===s?{object:l,property:r,path:e,separator:o,value:l[r]}:s}return e==c},l=e=>{if("object"!=typeof e)return[];let t=[];for(let o in e){let r=e[o];if("object"==typeof r)l(r).forEach((e=>{t.push({path:[o,e.path].flat(),value:e.value,type:typeof e.value})}));else{let e={path:o,value:r,type:typeof r};t.push(e)}}return t},o={Util:{deepFreeze:e,getProperty:t,getAllPath:l},Walker:{walkHorizontally:async(e={_scope_:null})=>{let t=[];return Object.keys(e).filter((e=>!["_scope_"].includes(e))).forEach((l=>{[...e._scope_.querySelectorAll(l)].filter((e=>e)).forEach((e=>{t.push({element:e,selector:new String(l)})}))})),await Promise.all(t.map((t=>new Promise((async(l,o)=>{try{await e[t.selector]({element:t.element,selector:t.selector,self:e}),l(t.selector)}catch(e){console.info("walkHorizontally |",e)}}))))),e},walkVertically:async(e={_scope_:null})=>{for(let t of Object.keys(e).filter((e=>!["_scope_"].includes(e)))){let l=[...e._scope_.querySelectorAll(t)].filter((e=>e));for(let o of l)try{await e[t]({element:o,selector:new String(t),self:e})}catch(e){console.info("walkVertically |",e)}}return e}}};window.dispatchEvent(new CustomEvent("BlueFoxJs@Ready",{detail:{BlueFoxJs:o}}))})();