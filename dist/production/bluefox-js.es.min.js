var e={d:(t,l)=>{for(var r in l)e.o(l,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:l[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{T:()=>a});const l=e=>{const t=Object.getOwnPropertyNames(e);for(const r of t){const t=e[r];t&&"object"==typeof t&&l(t)}return Object.freeze(e)},r=(e,t,l=".")=>{let o=e.split(l)[0],a=e.split(l).slice(1).join(l);if(null!=t[o]){let c=r(a,t[o],l);return!0===c?{object:t,property:o,path:e,separator:l,value:t[o]}:c}return e==a},o=e=>{if("object"!=typeof e)return[];let t=[];for(let l in e){let r=e[l];if("object"==typeof r)o(r).forEach((e=>{t.push({path:[l,e.path].flat(),value:e.value,type:typeof e.value})}));else{let e={path:l,value:r,type:typeof r};t.push(e)}}return t},a={Util:{deepFreeze:l,getProperty:r,getAllPath:o},Walker:{walkHorizontally:async(e={_scope_:null})=>{let t=[];return Object.keys(e).filter((e=>!["_scope_"].includes(e))).forEach((l=>{[...e._scope_.querySelectorAll(l)].filter((e=>e)).forEach((e=>{t.push({element:e,selector:new String(l)})}))})),await Promise.all(t.map((t=>new Promise((async(l,r)=>{try{await e[t.selector]({element:t.element,selector:t.selector,self:e}),l(t.selector)}catch(e){console.info("walkHorizontally |",e)}}))))),e},walkVertically:async(e={_scope_:null})=>{for(let t of Object.keys(e).filter((e=>!["_scope_"].includes(e)))){let l=[...e._scope_.querySelectorAll(t)].filter((e=>e));for(let r of l)try{await e[t]({element:r,selector:new String(t),self:e})}catch(e){console.info("walkVertically |",e)}}return e}}};var c=t.T;export{c as BlueFoxJs};